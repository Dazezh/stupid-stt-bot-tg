import requests
import random
import time
import telebot

from threading import Thread
from STT import stt

# –ü–†–ò–í–ï–¢! –Ø –Ω–µ –∑–Ω–∞—é –∑–∞—á–µ–º —Ç—ã —Å–∫–∞—á–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –Ω–æ —É–¥–∞—á–∏ —Ç–µ–±–µ

token = '' # –°—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
admin = 0 # –°—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–º—É –±—É–¥—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å

# –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∞–µ–º —É https://t.me/BotFather
# –°–≤–æ–π ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É https://t.me/getmyid_bot

bot = telebot.TeleBot(token, parse_mode = 'Markdown')

me = bot.get_me()

class internal_function():
    session_stat = {
        'vk': [1, 1],
        'vosk': [1, 1]
    }

    query = {
        'now_recognition': 0,
        'query': []
    }
    
    def rewrite_and_compress(self, message: telebot.types.Message, action: str):
        bot.send_chat_action(message.from_user.id, 'typing', 1)
        bot.reply_to(message, '*–•–æ—Ä–æ—à–æ!‚úÖ* –í–∞—à —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!')
        bot.send_chat_action(message.from_user.id, 'typing', 20)

        headers = {
            'accept': 'application/json',
        }

        json_data = {
            'instances': [
                {
                    'text': message.text,
                },
            ],
        }

        if action == 'rewrite': # –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            json_data['instances'][0]['range_mode'] = 'bertscore'
            json_data['instances'][0]['num_return_sequences'] = 4

            response = requests.post('https://api.aicloud.sbercloud.ru/public/v2/rewriter/predict', headers=headers, json=json_data)
        
        else:
            response = requests.post('https://api.aicloud.sbercloud.ru/public/v2/summarizator/predict', headers=headers, json=json_data)

        response = response.json()

        if not response.get('comment') or response.get('comment') == 'Ok':
            if action == 'rewrite':
                if response['prediction_best']['bertscore'] in response['predictions_all']: # –µ—Å–ª–∏ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö, —Ç–æ —É–¥–∞–ª—è–µ–º
                    response['predictions_all'].pop(response['predictions_all'].index(response['prediction_best']['bertscore']))

                bot.send_message(message.from_user.id, f'*–õ—É—á—à–∏–π:*\n `{response["prediction_best"]["bertscore"]}`')

                for index in range(len(response['predictions_all']) - 1):
                    bot.send_message(message.from_user.id, f'*–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ{index + 1}*\n `{response["predictions_all"][index]}`')

                return
            
            else:
                bot.send_message(message.from_user.id, f'*–°–∂–∞—Ç—ã–π —Ç–µ–∫—Å—Ç:*\n `{response["predictions"]}`')

        elif response.get('comment'):
            return bot.send_message(message.from_user.id, f'*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!‚ùå* –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò: `{response.get("comment")}`')
        
        else:
            return bot.send_message(message.from_user.id, '*–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!‚ùå* –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç')

    def add_stat(self, message: telebot.types.Message, **other):        
        if message.voice:
            self.session_stat[other['service']][0] += message.voice.duration # –¥–ª–∏–Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
            self.session_stat[other['service']][1] += other['recognition_time'] # –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ
        
        elif message.video_note: # —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ, –Ω–æ –µ—Å–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫
            self.session_stat[other['service']][0] += message.video_note.duration # –¥–ª–∏–Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
            self.session_stat[other['service']][1] += other['recognition_time'] # –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ
        
        return
    
    def recognition(self, message, app):
        bot.edit_message_text(
            '*WOW!* –ù–µ—É–∂–µ–ª–∏ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å!',
            message.chat.id,
            message.id
        )

        session_stat = self.session_stat

        temp = time.time()

        seconds_recognized = session_stat[app[0]][1] / session_stat[app[0]][0]
        
        if message.reply_to_message.content_type == 'voice': # —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–π—Å –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫
            file_id = message.reply_to_message.voice.file_id # id —Ñ–∞–π–ª–∞
            duration = message.reply_to_message.voice.duration # –¥–ª–∏–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
        
        else: # —Ç–∞–∫ –∂–µ –¥–ª—è –∫—Ä—É–∂–æ—á–∫–∞
            file_id = message.reply_to_message.video_note.file_id
            duration = message.reply_to_message.video_note.duration

        bot.edit_message_text(
            '*WOW!* –ù–µ—É–∂–µ–ª–∏ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å!\n–≠—Ç–æ –∑–∞–π–º—ë—Ç: _~{0}s_'.format(round(seconds_recognized * duration)),
            message.chat.id,
            message.id,
        )

        with open(file_id, 'wb') as file: # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = bot.get_file(file_id)

            file.write(bot.download_file(file_info.file_path))
        
        message.reply_to_message.text = stt.with_app(file_id, app[0])
        temp = round(time.time() - temp, 2)

        if not message.reply_to_message.text:
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(text = f'—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—åüó£', callback_data = '-{0}{1}'.format(app[0], app[1])))

            bot.edit_message_text(
                '<b>{0} –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å</b>\n{1}'.format(app[0], message.html_text),
                message.chat.id,
                message.id,
                reply_markup = markup,
                parse_mode = 'html'
            )
        
        else:
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(text = f'—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—åüó£', callback_data = 'n{0}'.format(app[1])))
            
            bot.edit_message_text(
                ' _{1}_\n*{2}/{0}s*'.format(temp, message.reply_to_message.text, app[0]),
                message.chat.id,
                message.id,
                reply_markup = markup
            )
        
        self.query['now_recognition'] -= 1

        return self.add_stat(message.reply_to_message, recognition_time = temp, service = app[0]) # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —É—á—ë—Ç

    def task(self):
        while True:
            if self.query['query'] and self.query['now_recognition']:
                for message in self.query['query']:
                    try:
                        bot.edit_message_text(
                            '''*Opps!* –£ –Ω–∞—Å –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—Éüôä
        –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {0}
        –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: _~—è –Ω–µ —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å_
                            '''.format(self.query['query'].index(message) + 1),
                        message[0].chat.id,
                        message[0].id
                        )
                    
                    except:
                        pass

            if self.query['query'] and self.query['now_recognition'] < 2:
                self.query['now_recognition'] += 1

                message = self.query['query'].pop(0) # message[0] - –¢–µ–ª–µ–≥—Ä–∞–º–º —Å–æ–æ–±—â–µ–Ω–∏–µ, message[1] - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏

                th = Thread(target = self.recognition, args = (message[0], message[1]))
                th.start()

            time.sleep(0.2)

in_func = internal_function()

@bot.callback_query_handler(func=lambda call: True)
def re_stt(call: telebot.types.CallbackQuery):
    message = call.message

    if not message.reply_to_message:
        bot.edit_message_text(
            '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
            message.chat.id,
            message.id
        )
        return bot.answer_callback_query(call.id, '–ù—è –ø–æ–∫–∞')

    if call.data.startswith('~'):
        call.data = call.data.replace('~', '')

        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text = '—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—åüó£', callback_data = 'n{0}'.format(call.data)))

        bot.edit_message_reply_markup(message.chat.id, message.id, reply_markup = markup)
        return bot.answer_callback_query(call.id, 'ok')
    
    if not call.data or call.data.startswith('n'):
        call.data = call.data.replace('n', '')

        if '-' in call.data:
            data = call.data.rsplit('-')
        
        else:
            data = ()
        
        markup = telebot.types.InlineKeyboardMarkup()

        if 'vk' in data:
            markup.add(telebot.types.InlineKeyboardButton(text = 'VK‚ùå', callback_data = '!'))
        
        else:
            markup.add(telebot.types.InlineKeyboardButton(text = 'VKüöæ', callback_data = 'vk%{0}'.format(call.data)))
        
        if 'vosk' in data:
            markup.add(telebot.types.InlineKeyboardButton(text = 'Vosk‚ùå', callback_data = '!'))
        
        else:
            markup.add(telebot.types.InlineKeyboardButton(text = 'VosküÜì', callback_data = 'vosk%{0}'.format(call.data)))
        
        markup.add(telebot.types.InlineKeyboardButton(text = '–Ω–∞–∑–∞–¥‚óÄÔ∏è', callback_data = '~{0}'.format(call.data)))
        
        bot.edit_message_reply_markup(message.chat.id, message.id, reply_markup = markup)
        return bot.answer_callback_query(call.id, '–í—ã–±–µ—Ä–∞–π—Ç–µ')
    
    elif '%' in call.data:
        app = call.data.rsplit('%')
        
        if len(app) < 2:
            app.append['']
        
        in_func.query['query'].append((message, app))
        return bot.answer_callback_query(call.id, '–í –æ—á–µ—Ä–µ–¥–∏')
    
    elif call.data == '!':
        return bot.answer_callback_query(call.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ!')
    
    elif '-' in call.data:
        data = call.data.rsplit('-')
        markup = telebot.types.InlineKeyboardMarkup()

        if 'vk' in data:
            markup.add(telebot.types.InlineKeyboardButton(text = 'VK‚ùå', callback_data = '!'))
        
        else:
            markup.add(telebot.types.InlineKeyboardButton(text = 'VKüöæ', callback_data = 'vk%{0}'.format(call.data)))
        
        if 'vosk' in data:
            markup.add(telebot.types.InlineKeyboardButton(text = 'Vosk‚ùå', callback_data = '!'))
        
        else:
            markup.add(telebot.types.InlineKeyboardButton(text = 'VosküÜì', callback_data = 'vosk%{0}'.format(call.data)))
        
        markup.add(telebot.types.InlineKeyboardButton(text = '–Ω–∞–∑–∞–¥‚óÄÔ∏è', callback_data = '~{0}'.format(call.data)))
        
        bot.edit_message_reply_markup(message.chat.id, message.id, reply_markup = markup)
        return bot.answer_callback_query(call.id, '–í—ã–±–µ—Ä–∞–π—Ç–µ')
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—åüó£', callback_data = 'n'))
    bot.edit_message_reply_markup(message.chat.id, message.id, reply_markup = markup)
    return bot.answer_callback_query(call.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

@bot.message_handler(content_types = ['video_note', 'voice'])
def video_note_and_audio(message: telebot.types.Message): # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∫—Ä—É–∂–æ—á–∫–æ–≤
    reply_message = bot.reply_to(message, 'üîò*–î—É–º–∞—é...*')

    if message.content_type == 'voice': # —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–π—Å –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫
        duration = message.voice.duration # –¥–ª–∏–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
    
    else: # —Ç–∞–∫ –∂–µ –¥–ª—è –∫—Ä—É–∂–æ—á–∫–∞
        duration = message.video_note.duration
    
    if duration > 362: # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ 6 –º–∏–Ω—É—Ç
        return bot.edit_message_text(  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª –∏ —á—Ç–æ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            '‚ùå*–ò–∑–≤–∏–Ω–∏—Ç–µ*, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –Ø –º–æ–≥—É *–º–∞–∫—Å–∏–º—É–º 6 –º–∏–Ω—É—Ç*',
            reply_message.chat.id,
            reply_message.id
            )
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—åüó£', callback_data = 'n'))

    bot.edit_message_text(
        '*–ì–°*',
        reply_message.chat.id,
        reply_message.id,
        reply_markup = markup
        )

@bot.message_handler(commands = ['rewrite'])
def rewrite_text(message: telebot.types.Message):
    bot.send_chat_action(message.chat.id, 'typing', 1)

    if message.text.startswith('/rewrite'):
        message.text = message.text.replace('/rewrite', '', 1).strip()

    if message.text.startswith('@'):
        message.text = message.text.replace(f'@{me.username}', '', 1).strip()

    if message.text:
        in_func.rewrite_and_compress(message.from_user.id, message.text, 'rewrite')
    
    else:
        bot.reply_to(message, '–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç\n–ü–∏—à–∏—Ç–µ —Ç–∞–∫ /rewrite –≤–∞—à —Ç–µ–∫—Å—Ç')

@bot.message_handler(commands = ['compress'])
def compress_text(message):
    bot.send_chat_action(message.chat.id, 'typing', 1)

    if message.text.startswith('/compress'):
        message.text = message.text.replace('/compress', '', 1).strip()

    if message.text.startswith('@'):
        message.text = message.text.replace(f'@{me.username}', '', 1).strip()

    if message.text:
        in_func.rewrite_and_compress(message, 'compress')
    
    else:
        bot.reply_to(message, '–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç\n–ü–∏—à–∏—Ç–µ —Ç–∞–∫ /compress –≤–∞—à —Ç–µ–∫—Å—Ç')

@bot.message_handler(commands = ['start'])
def start(message: telebot.types.Message):
    return bot.send_message(message.chat.id, '–Ø - –¢–∞–∫–º–æ—Ç. –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤ –¥–µ–ø—Ä–µ—Å–∏–∏ –∏ –æ—Å—Ç–∞–≤–∏–ª —É –º–µ–Ω—è —Ç–æ–ª—å–∫–æ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n1. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π 2. –í—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')

@bot.message_handler(content_types = ['text'])
def text_message(message: telebot.types.Message): # –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text.lower() in ('–±–æ—Ç?', '–∂–∏–≤?', '–∂–∏–≤–æ–π', '–±–æ—Ç –∂–∏–≤', '–±–æ—Ç'):
        return bot.send_message(message.chat.id, random.choice((
            '–Ø - –∂–∏–≤', '–ñ–∏–≤–æ–π —è', '–ï—â—ë –≤–∞—Å –ø–µ—Ä–µ–∂–∏–≤—É', '–¢—É—Ç —è',
            '–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?', '–ù—É?', '–ö–æ –º–Ω–µ –≤–æ–ø—Ä–æ—Å?', '–î–æ–ø—É—Å—Ç–∏–º —Ç—É—Ç'
        )))
    
    elif not message.reply_to_message:
        return
    
    elif not message.reply_to_message.from_user.id == me.id:
        return
    
    if ' –∏–ª–∏ ' in message.text:
        return bot.send_message(message.chat.id, random.choice(message.text.rsplit(' –∏–ª–∏ ')))
    
    else:
        return bot.send_message(message.chat.id, random.choice((
            '*YES!*', '*NO!*', '–•–º... *–ù–µ—Ç*?',
            '–•–º... *–î–∞*?', 'no üëéüèø', 'yes üëçüèø',
            '‚úÖ', '‚ùå', '–î–æ–ø—É—Å—Ç–∏–º *–¥–∞*',
            '–î–æ–ø—É—Å—Ç–∏–º *–Ω–µ—Ç*', '–ù–µ—Ç...',
            '–î–∞...',
        )))

def main():
    th = Thread(target = in_func.task)
    th.start()
    
    bot.send_message(admin, f'''*–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚úÖ*
    –î–∞—Ç–∞: {time.ctime(time.time())}
    ''')

    while True:
        try:
            bot.polling(timeout = 100, long_polling_timeout = 100)
        
        except Exception as ex:
            bot.stop_polling()
            bot.send_message(admin, f'*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*\n`{ex}`')

if __name__ == '__main__':
    main()